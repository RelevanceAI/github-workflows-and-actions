name: "Perform security scan"

on: 
  workflow_call:
    inputs:
      wiz-client-id:
        required: true
        type: string
      wiz-tag:
        required: true
        type: string
      aws-access-key-id:
        required: true
        type: string
      aws-region:
        required: false
        type: string
        default: 'ap-southeast-2'
      aws-ecr-repository-name:
        required: true
        type: string  
      docker-context:
        required: false
        type: string
        default: '.'
      docker-arch:
        required: false
        type: string
        default: 'linux/amd64'
      docker-file-path:
        required: false
        type: string
        default: 'Dockerfile'
      docker-image-description:
        required: true
        type: string
      docker-image-tag:
        required: false
        type: string
        default: '[version]'
    secrets:
      wiz-client-secret:
        required: true
      aws-secret-access-key:
        required: true

jobs:    
  generate-version:
    name: Generate version number
    runs-on:
    - self-hosted
    - amd64
    - v2
    outputs:
      version_number: ${{ steps.version.outputs.version_number }}
    steps:
    - name: Generate version number
      id: version
      env:
        EVENT_NAME: ${{ github.event_name }}
        PR_SHA: ${{ github.event.pull_request.head.sha }}
        REF_TYPE: ${{ github.ref_type }}
        REF_NAME: ${{ github.ref_name }}
      run: |
        if [[ "$REF_TYPE" == "tag" ]]; then
          version=${REF_NAME#v}
        else
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            sha=${PR_SHA:0:7}
          fi
          if [[ "${EVENT_NAME}${REF_TYPE}" == "pushbranch" ]]; then
            sha=${GITHUB_SHA:0:7}
          fi
          let days=($(date -d 'today 00:00:00' '+%s') - $(date -d '20220701 00:00:00' '+%s'))/86400
          let seconds=($(date '+%s') - $(date -d 'today 00:00:00' '+%s'))
          version="0.$days.$seconds-$sha"
        fi
        echo Version is $version
        echo "version_number=$version" >> $GITHUB_OUTPUT
  
  # Security checks

  wiz-scan:
    name: "Perform scan of ${{ inputs.docker-image-description }} docker image with Wiz"
    needs: generate-version
    runs-on:
    - self-hosted
    - amd64
    - v2
    continue-on-error: false
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Prepare docker image tag
      run: |
        #!/bin/bash
        set -Eeuo pipefail
        image_tag=${{ inputs.docker-image-tag }}
        image_tag=${image_tag/\[version\]/${{ needs.generate-version.outputs.version_number }}}
        # remove after it is thoroughly tested
        echo Image tag is $image_tag
        echo "image_tag=$image_tag" >> $GITHUB_ENV
    - name: Build and tag docker image
      uses: docker/build-push-action@v3
      with:
        context: ${{ inputs.docker-context }}
        file: ${{ inputs.docker-file-path }}
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        cache-from: type=local,src=/vagrant/cache
        cache-to: type=local,dest=/vagrant/cache
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-ecr-repository-name }}:${{ env.image_tag }}
        load: true
        platforms: ${{ inputs.docker-arch }}
    - name: Perform image security scan
      env:
        WIZ_CLIENT_SECRET: ${{ secrets.wiz-client-secret }}
      run: |
        #!/bin/bash
        set -e
        set -o pipefail
        set -u
        curl -o wizcli https://wizcli.app.wiz.io/wizcli && chmod +x wizcli
        ./wizcli auth --id "${{ inputs.wiz-client-id }}" --secret "$WIZ_CLIENT_SECRET"
        ./wizcli docker scan --image ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-ecr-repository-name }}:${{ env.image_tag }} --tag svc=${{ inputs.wiz-tag }}
